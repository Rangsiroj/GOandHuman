from gnugo_text_game import GNUGo

class GoGameSimulator:
    def __init__(self):
        self.gnugo = GNUGo()
        self.reset_board()

    def reset_board(self):
        self.gnugo.clear_board()
        self.board_state = {}
        self.captured_history = set()
        self.move_history = []
        self.current_turn = 'black'
        self.turn_count = 1
        print("üîÑ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n")

    def play(self):
        print("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏° (‡∏î‡∏≥=‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡∏Ç‡∏≤‡∏ß=AI)")
        print("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô D4, K10 ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'PASS', 'UNDO', 'RESET', 'HELP', 'QUIT'\n")

        try:
            while True:
                print(f"\nüé≤ ‡∏ï‡∏≤‡∏ó‡∏µ‡πà {self.turn_count}")
                print("üßæ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
                print(self.gnugo.show_board())

                if self.current_turn == 'black':
                    move = input("üë§ ‡∏Ñ‡∏∏‡∏ì (‡∏î‡∏≥) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: ").strip().upper()

                    if move == 'QUIT':
                        break

                    if move == 'HELP':
                        self.show_help()
                        continue

                    if move == 'RESET':
                        self.reset_board()
                        continue

                    if move == 'PASS':
                        print("‚è≠Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤")
                        ai_move = self.gnugo.genmove("white")
                        print(f"ü§ñ AI (‡∏Ç‡∏≤‡∏ß) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {ai_move}")
                        if ai_move.upper() == 'PASS':
                            print("üèÅ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏•‡∏á (‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤)")
                            break
                        self.board_state[ai_move] = 'white'
                        self.move_history.append(('white', ai_move))
                        continue

                    if move == 'UNDO':
                        self.undo_last_move()
                        continue

                    if move in self.board_state and move not in self.captured_history:
                        print("üö´ ‡∏´‡∏°‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏•‡∏á‡∏ã‡πâ‡∏≥)")
                        continue

                    valid = self.gnugo.play_move("black", move)
                    if "illegal move" in valid.lower() or valid == '':
                        print("‚ùå ‡∏´‡∏°‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                        continue

                    self.board_state[move] = 'black'
                    self.move_history.append(('black', move))
                    self.current_turn = 'white'
                    self.turn_count += 1

                elif self.current_turn == 'white':
                    ai_move = self.gnugo.genmove("white")
                    print(f"ü§ñ AI (‡∏Ç‡∏≤‡∏ß) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {ai_move}")
                    if ai_move.lower() != 'pass':
                        self.board_state[ai_move] = 'white'
                        self.move_history.append(('white', ai_move))
                    self.current_turn = 'black'

        except KeyboardInterrupt:
            print("\n‚õî ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏°‡∏î‡πâ‡∏ß‡∏¢ Ctrl+C")

        finally:
            self.gnugo.quit()
            print("üëã ‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô!")

    def undo_last_move(self):
        if len(self.move_history) < 2:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Undo ‡πÑ‡∏î‡πâ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢)")
            return

        self.gnugo.send_command("undo")
        color2, move2 = self.move_history.pop()
        if move2 in self.board_state:
            del self.board_state[move2]

        self.gnugo.send_command("undo")
        color1, move1 = self.move_history.pop()
        if move1 in self.board_state:
            del self.board_state[move1]

        self.turn_count -= 1
        self.current_turn = 'black'
        print(f"‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 1 ‡∏ï‡∏≤ (‡∏•‡∏ö‡∏´‡∏°‡∏≤‡∏Å {move1} ‡πÅ‡∏•‡∏∞ {move2})")

    def show_help(self):
        print("\nüìò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:")
        print("- D4, K10, ... : ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥")
        print("- PASS        : ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤")
        print("- UNDO        : ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 1 ‡∏ï‡∏≤ (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô + AI)")
        print("- RESET       : ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà")
        print("- HELP        : ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("- QUIT        : ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°\n")

if __name__ == "__main__":
    GoGameSimulator().play()