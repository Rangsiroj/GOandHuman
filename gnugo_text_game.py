
# -----------------------------
# GNUGo: ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° GNUGo (AI ‡∏´‡∏°‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏°) ‡∏ú‡πà‡∏≤‡∏ô GTP protocol
# -----------------------------

import subprocess

class GNUGo:
    def __init__(self, gnugo_path='GNU_GO\gnugo.exe'):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á process ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô GNUGo ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏´‡∏°‡∏î GTP
        self.process = subprocess.Popen(
            [gnugo_path, '--mode', 'gtp'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

    # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á GNUGo ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    def send_command(self, command):
        try:
            self.process.stdin.write(command + '\n')
            self.process.stdin.flush()
            response_lines = []
            while True:
                line = self.process.stdout.readline()
                if line.strip() == '':
                    break
                response_lines.append(line.strip())
            return '\n'.join(response_lines).replace('= ', '').strip()
        except Exception as e:
            return f"[ERROR] {e}"

    # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ GNUGo ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    def play_move(self, color, move):
        return self.send_command(f"play {color} {move}")

    # ‡πÉ‡∏´‡πâ GNUGo ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    def genmove(self, color):
        return self.send_command(f"genmove {color}")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    def show_board(self):
        return self.send_command("showboard")

    # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    def clear_board(self):
        return self.send_command("clear_board")

    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°
    def final_score(self):
        return self.send_command("final_score")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á
    def territory(self):
        return self.send_command("territory")

    # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    def score(self):
        return self.send_command("score")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå SGF
    def savesgf(self, filepath):
        return self.send_command(f"savesgf {filepath}")

    # ‡∏õ‡∏¥‡∏î process GNUGo
    def quit(self):
        self.process.terminate()
        print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


# -----------------------------
# main: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö AI ‡∏ú‡πà‡∏≤‡∏ô command line
# -----------------------------
def main():
    print("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏´‡∏°‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö AI (‡∏™‡∏µ‡∏î‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì, ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏Ñ‡∏∑‡∏≠ AI)")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô D4, K10 (‡∏´‡∏£‡∏∑‡∏≠ 'quit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)\n")

    gnugo = GNUGo()
    gnugo.clear_board()

    while True:
        print("\nüßæ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        print(gnugo.show_board())

        move = input("üë§ ‡∏Ñ‡∏∏‡∏ì (‡∏î‡∏≥) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: ").strip().upper()

        if move == 'QUIT':
            break

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
        valid = gnugo.play_move("black", move)
        if "illegal move" in valid.lower() or valid == '':
            print("‚ùå ‡∏´‡∏°‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            continue

        # ‡πÉ‡∏´‡πâ AI ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß
        ai_move = gnugo.genmove("white")
        print(f"ü§ñ AI (‡∏Ç‡∏≤‡∏ß) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {ai_move}")

    gnugo.quit()


# ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if __name__ == "__main__":
    main()