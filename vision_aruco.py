
# -----------------------------
# VisionSystem: ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡πÇ‡∏Å‡∏∞‡∏î‡πâ‡∏ß‡∏¢ ArUco Marker
# -----------------------------

import cv2
import numpy as np
import time
import cv2.aruco as aruco
from board_mapper_aruco import get_board_position  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î pixel ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
from gnugo_text_game import GNUGo  # ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° AI ‡πÇ‡∏Å‡∏∞
from game_logic import GameLogic  # ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏Å‡∏°‡πÇ‡∏Å‡∏∞
import os


# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ CLAHE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° contrast
def auto_adjust_brightness(gray_image):
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    return clahe.apply(gray_image)


# ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 'A19') ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î pixel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
def board_to_pixel(position):
    if len(position) < 2:
        return (0, 0)
    col = ord(position[0].upper()) - ord('A')
    if col >= 8:
        col -= 1
    row = 19 - int(position[1:])
    x = int((col / 18) * 500)
    y = int((row / 18) * 500)
    return (x, y)


# ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 'A19') ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (col, row)
def board_pos_to_xy(pos):
    # pos: ‡πÄ‡∏ä‡πà‡∏ô 'A19', 'Q16', ...
    if len(pos) < 2:
        return None
    col_chr = pos[0].upper()
    row_str = pos[1:]
    if not row_str.isdigit():
        return None
    col = ord(col_chr) - ord('A')
    if col_chr >= 'I':
        col -= 1
    row = 19 - int(row_str)
    return (col, row)


# ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Vision ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ArUco ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏Å
class VisionSystem:
    def __init__(self, url='http://10.106.3.149:4747/video'):
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å URL ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        self.cap = cv2.VideoCapture(url)
        if not self.cap.isOpened():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        else:
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logic ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
        self.logic = GameLogic(GNUGo())
        self.logic.reset()

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î dictionary ‡πÅ‡∏•‡∏∞ parameter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArUco marker
        self.aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_4X4_50)
        self.parameters = aruco.DetectorParameters()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á trackbar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö brightness, contrast, threshold
        cv2.namedWindow("Perspective View")
        cv2.createTrackbar('Brightness', "Perspective View", 94, 100, lambda x: None)
        cv2.createTrackbar('Contrast', "Perspective View", 87, 100, lambda x: None)
        cv2.createTrackbar('White Threshold', "Perspective View", 252, 255, lambda x: None)
        cv2.createTrackbar('Black Threshold', "Perspective View", 174, 255, lambda x: None)

        self.warned_illegal_move = False
        self.warned_occupied_positions = set()


    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    def is_camera_stable(self, gray, threshold=500000):
        now = time.time()
        if not hasattr(self, 'prev_gray'):
            self.prev_gray = gray
            self.last_motion_time = now
            return True
        diff = cv2.absdiff(self.prev_gray, gray)
        score = np.sum(diff)
        self.prev_gray = gray
        if score > threshold:
            self.last_motion_time = now
            return False
        return (now - self.last_motion_time) > 1.0


    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ArUco ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
    def run(self):
        print("üì∑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ArUco (ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")
        cv2.namedWindow("Aruco Detection")
        while True:
            ret, frame = self.cap.read()
            if not ret:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                break
            if not hasattr(self, 'frame_count'):
                self.frame_count = 0
            self.frame_count += 1
            if self.frame_count % 5 != 0:
                continue
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å trackbar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û
            brightness = cv2.getTrackbarPos('Brightness', "Perspective View") - 50
            contrast = cv2.getTrackbarPos('Contrast', "Perspective View") / 50
            white_thresh = cv2.getTrackbarPos('White Threshold', "Perspective View")
            black_thresh = cv2.getTrackbarPos('Black Threshold', "Perspective View")
            frame = cv2.convertScaleAbs(frame, alpha=contrast, beta=brightness)
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not self.is_camera_stable(gray):
                cv2.imshow("Aruco Detection", frame)
                if cv2.waitKey(1) & 0xFF == 27:
                    break
                continue
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ArUco marker ‡πÉ‡∏ô‡∏†‡∏≤‡∏û
            corners, ids, _ = aruco.detectMarkers(gray, self.aruco_dict, parameters=self.parameters)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö marker ‡∏Ñ‡∏£‡∏ö 4 ‡∏à‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if ids is not None and len(ids) >= 4:
                ids = ids.flatten()
                marker_positions = {}
                for i, marker_id in enumerate(ids):
                    if marker_id in [0, 1, 2, 3]:
                        marker_positions[marker_id] = corners[i][0].mean(axis=0)
                if len(marker_positions) == 4:
                    try:
                        # Perspective Transform ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
                        src_pts = np.float32([
                            marker_positions[0],
                            marker_positions[1],
                            marker_positions[2],
                            marker_positions[3]
                        ])
                        dst_pts = np.float32([[0, 0], [500, 0], [500, 500], [0, 500]])
                        matrix = cv2.getPerspectiveTransform(src_pts, dst_pts)
                        warped = cv2.warpPerspective(frame, matrix, (500, 500))
                        MARGIN = 25
                        cropped = warped[MARGIN:500 - MARGIN, MARGIN:500 - MARGIN]
                        enhanced_color = cropped.copy()
                        gray = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)
                        enhanced = auto_adjust_brightness(gray)
                        blurred = cv2.GaussianBlur(enhanced, (5, 5), 0)
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß
                        BW_black = cv2.threshold(blurred, black_thresh, 255, cv2.THRESH_BINARY_INV)[1]
                        BW_white = cv2.threshold(blurred, white_thresh, 255, cv2.THRESH_BINARY)[1]
                        kernel = np.ones((5, 5), np.uint8)
                        BW_black = cv2.morphologyEx(BW_black, cv2.MORPH_OPEN, kernel)
                        BW_white = cv2.morphologyEx(BW_white, cv2.MORPH_OPEN, kernel)
                        captured_by_black = []
                        captured_by_white = []
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å
                        previous_board_state = self.logic.logic.board_state.copy() if hasattr(self.logic, 'logic') else self.logic.board_state.copy()
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÉ‡∏ô‡∏†‡∏≤‡∏û
                        for mask, color in [(BW_white, "white"), (BW_black, "black")]:
                            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                            detected_positions = set()
                            for cnt in contours:
                                (x, y), r = cv2.minEnclosingCircle(cnt)
                                area = cv2.contourArea(cnt)
                                perimeter = cv2.arcLength(cnt, True)
                                circularity = 4 * np.pi * area / (perimeter ** 2) if perimeter > 0 else 0
                                # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏Å
                                if 7 <= r <= 14 and 0.80 <= circularity <= 1.15 and 60 <= area <= 450:
                                    board_pos = get_board_position(int(x), int(y))
                                    if board_pos:
                                        detected_positions.add(board_pos)
                                        cv2.putText(enhanced_color, f"{board_pos}", (int(x), int(y)),
                                                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)
                            previous_positions = {pos for pos, c in self.logic.board_state.items() if c == color}
                            diff = detected_positions - previous_positions
                            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                            if color == self.logic.current_turn and len(diff) == 1:
                                board_pos = diff.pop()
                                if board_pos in self.logic.board_state:
                                    if board_pos not in self.warned_occupied_positions:
                                        print(f"üö´ ‡∏´‡∏°‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {board_pos} ‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
                                        self.warned_occupied_positions.add(board_pos)
                                    continue
                                ok, result = self.logic.play_move(color, board_pos)
                                if not ok:
                                    msg = None
                                    if "occupied" in result.lower():
                                        msg = f"üö´ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {board_pos} ‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ß‡∏≤‡∏á‡∏ã‡πâ‡∏≥)"
                                    elif "ko" in result.lower():
                                        msg = f"‚ö†Ô∏è ‡∏ú‡∏¥‡∏î‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÇ‡∏Ñ‡∏∞ (Ko rule) ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {board_pos}"
                                    elif "suicide" in result.lower():
                                        msg = f"‚ö†Ô∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà {board_pos} ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏°‡∏≤‡∏Å‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Suicide move)"
                                    else:
                                        msg = f"‚ùå ‡∏´‡∏°‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ({result})"
                                    if not self.warned_illegal_move:
                                        print(msg)
                                        self.warned_illegal_move = True
                                    continue
                                self.warned_illegal_move = False
                                self.warned_occupied_positions.clear()
                                xy = board_pos_to_xy(board_pos)
                                if color == 'black':
                                    print(f"=== ‡∏ï‡∏≤‡∏ó‡∏µ‡πà {self.logic.turn_number} ===")
                                    print(f"‚úÖ BLACK ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà {board_pos} (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X,Y = {xy[0]},{xy[1]})")
                                    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡πÄ‡∏î‡∏¥‡∏ô
                                    new_board_state_after_black = self.logic.board_state.copy()
                                    captured_white_by_black = [pos for pos in previous_board_state if pos not in new_board_state_after_black and previous_board_state[pos] == 'white']
                                    if captured_white_by_black:
                                        self.logic.captured_count['black'] += len(captured_white_by_black)
                                        for pos in captured_white_by_black:
                                            print(f"üí• BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {pos} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)")
                                        capture_message = f"BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {', '.join(captured_white_by_black)} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)"
                                        print("\n===== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å =====")
                                        print(capture_message)
                                        print(f"Captured - W: {self.logic.captured_count['white']} | B: {self.logic.captured_count['black']}")
                                        print("==============================\n")
                                    self.last_captured_white_by_black = set(captured_white_by_black)
                                    ai_move, elapsed = self.logic.ai_move()
                                    if ai_move.strip().lower() == 'pass':
                                        print(f"ü§ñ AI (WHITE) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: PASS")
                                        print(f"‚åö ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                                    else:
                                        ai_xy = board_pos_to_xy(ai_move)
                                        print(f"ü§ñ AI (WHITE) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {ai_move} (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X,Y = {ai_xy[0]},{ai_xy[1]})")
                                        print(f"‚åö ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {elapsed:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                                else:
                                    print(f"‚úÖ WHITE ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà {board_pos} (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X,Y = {xy[0]},{xy[1]})")
                                new_board_state = self.logic.board_state.copy()
                                captured_black = [pos for pos in previous_board_state if pos not in new_board_state and previous_board_state[pos] == 'white']
                                captured_white = [pos for pos in previous_board_state if pos not in new_board_state and previous_board_state[pos] == 'black']
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥
                                if hasattr(self, 'last_captured_white_by_black'):
                                    captured_black = [pos for pos in captured_black if pos not in self.last_captured_white_by_black]
                                captured_by_black.extend(captured_black)
                                captured_by_white.extend(captured_white)
                                if captured_black or captured_white:
                                    if captured_black:
                                        self.logic.captured_count['black'] += len(captured_black)
                                        for pos in captured_black:
                                            print(f"üí• BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {pos} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)")
                                    if captured_white:
                                        self.logic.captured_count['white'] += len(captured_white)
                                        for pos in captured_white:
                                            print(f"üí• WHITE ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {pos} (‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)")
                                    capture_message = ""
                                    if captured_by_black:
                                        capture_message += f"BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {', '.join(captured_by_black)} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)\n"
                                    if captured_by_white:
                                        capture_message += f"WHITE ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {', '.join(captured_by_white)} (‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)\n"
                                    print("\n===== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å =====")
                                    print(capture_message.strip())
                                    print(f"Captured - W: {self.logic.captured_count['white']} | B: {self.logic.captured_count['black']}")
                                    print("==============================\n")
                                self.last_captured_white_by_black = set()
                        # ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô
                        for pos in captured_by_black + captured_by_white:
                            px, py = board_to_pixel(pos)
                            cv2.circle(enhanced_color, (px, py), 15, (0, 0, 255), 2)
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢ AI
                        score = self.logic.estimate_score()
                        cv2.putText(enhanced_color, f"Score: {score}", (10, 480), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≤‡∏á ‡πÜ
                        cv2.imshow("Perspective View", enhanced_color)
                        cv2.imshow("Black Stones", BW_black)
                    except Exception as e:
                        print(f"‚ö†Ô∏è Transform Error: {e}")
            # ‡∏ß‡∏≤‡∏î marker ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏†‡∏≤‡∏û
            aruco.drawDetectedMarkers(frame, corners, ids)
            cv2.imshow("Aruco Detection", frame)
            key = cv2.waitKey(1) & 0xFF
            # ‡∏Å‡∏î u/U ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Undo, r/R ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Reset, p/P ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Pass, ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
            if key in (ord('u'), ord('U')):
                print("\n‚è™ Undo ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 1 ‡∏ï‡∏≤)")
                self.logic.undo()
                print(f"‚ñ∂Ô∏è ‡∏ï‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ‡∏ï‡∏≤‡∏ó‡∏µ‡πà {self.logic.turn_number}")
                continue
            if key in (ord('r'), ord('R')):
                print("\nüîÑ Reset ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà!")
                self.logic.reset()
                print("‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß\n")
                continue
            if key in (ord('p'), ord('P')):
                print(f"\n‚è≠Ô∏è ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (BLACK) ‡∏Ç‡∏≠‡∏Å‡∏î PASS ‡πÉ‡∏ô‡∏ï‡∏≤‡∏ó‡∏µ‡πà {self.logic.turn_number}")
                ai_move = self.logic.pass_turn()
                print(f"ü§ñ AI (WHITE) ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {ai_move}")
                if ai_move.strip().lower() == 'pass':
                    print("\nüèÅ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
                    score = self.logic.final_score()
                    print(f"üìä ‡∏ú‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: {score}")
                    if score.startswith('B+'):
                        print("üèÜ ‡∏ù‡πà‡∏≤‡∏¢‡∏î‡∏≥ (BLACK) ‡∏ä‡∏ô‡∏∞!")
                    elif score.startswith('W+'):
                        print("üèÜ ‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏ß (WHITE) ‡∏ä‡∏ô‡∏∞!")
                    else:
                        print("ü§ù ‡∏ú‡∏•‡πÄ‡∏™‡∏°‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ")
                    import datetime
                    sgf_dir = "SGF"
                    if not os.path.exists(sgf_dir):
                        os.makedirs(sgf_dir)
                    sgf_filename = f"game_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.sgf"
                    sgf_path = os.path.join(sgf_dir, sgf_filename)
                    self.logic.save_sgf(sgf_path)
                    print(f"üìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå SGF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sgf_path} ")
                    break
                previous_board_state = self.logic.board_state.copy()
                new_board_state = self.logic.board_state.copy()
                captured_black = [pos for pos in previous_board_state if pos not in new_board_state and previous_board_state[pos] == 'white']
                captured_white = [pos for pos in previous_board_state if pos not in new_board_state and previous_board_state[pos] == 'black']
                if captured_black or captured_white:
                    if captured_black:
                        self.logic.captured_count['black'] += len(captured_black)
                        for pos in captured_black:
                            print(f"üí• BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {pos} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)")
                    if captured_white:
                        self.logic.captured_count['white'] += len(captured_white)
                        for pos in captured_white:
                            print(f"üí• WHITE ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {pos} (‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)")
                    capture_message = ""
                    if captured_black:
                        capture_message += f"BLACK ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {', '.join(captured_black)} (‡∏´‡∏°‡∏≤‡∏Å‡∏Ç‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)\n"
                    if captured_white:
                        capture_message += f"WHITE ‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà: {', '.join(captured_white)} (‡∏´‡∏°‡∏≤‡∏Å‡∏î‡∏≥‡∏ñ‡∏π‡∏Å‡∏Å‡∏¥‡∏ô)\n"
                    print("\n===== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å =====")
                    print(capture_message.strip())
                    print(f"Captured - W: {self.logic.captured_count['white']} | B: {self.logic.captured_count['black']}\n")
                    print("==============================\n")
                continue
            if key == 27:
                break
        self.release()


    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    def release(self):
        self.cap.release()
        cv2.destroyAllWindows()
        self.logic.gnugo.quit()
        print("üîï ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ AI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")


# ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if __name__ == "__main__":
    system = VisionSystem()
    system.run()